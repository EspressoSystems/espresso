# API and messages
#
# Work-in-progress based on
# https://www.notion.so/translucence/Query-service-v1-API-sketch-203581e934334ff48f639d4fd523668d
#
# TOML specification: https://github.com/kezhuw/toml-spec

[meta]
FORMAT_VERSION = "0.1.0"

# Logo is 1093x230

HTML_TOP = """
<!DOCTYPE html>
<html lang='en'>
  <head>
    <meta charset='utf-8'>
    <title>Spectrum Web Help</title>
    <link rel='stylesheet' href='public/css/style.css'>
    <script src='public/js/script.js'></script>
  </head>
  <body>
    <div><img src='public/media/Horizontal02.png'
              alt='Spectrum Logo'
              height='115'/></div>
    <h1>Spectrum Web Interface</h1>
"""

HTML_BOTTOM = """
  </body>
</html>
"""

HEADING_ROUTES = "Routes"
HEADING_PARAMETERS = "Parameters"
HEADING_DESCRIPTION = "Description"

# [route.getinfo]
# PATH = [ "getinfo" ]
# DOC = """
# _This is preliminary:_
# - version: full node version
# - network_id
# - blocks: total number of blocks (1 more than the latest block number if we start with block #0)
# - transactions: total number of transactions
# - records: total number of records (including spent)
# - circulation: total number of XYZ tokens in circulation *(implementation note: XYZ-related items can wait until the native token is implemented).*
# - blockchain_size: total size of all blocks (not the size of a full node; just bare blocks)
# - current_block_size: size of latest block
# - current_block_tx: number of transactions in latest block
# - mempool_transactions: number of transactions in mempool (known to node)
# - mempool_outputs: number of outputs in mempool (known to node)
# - mempool_size: mempool size in bytes (known to node)
# """

[route.getblockhash]
PATH = [ "getblockhash/latest", "getblockhash/:bkid", "getblockhash/index/:index" ]
":bkid" = "TaggedBase64"
":index" = "Integer"
DOC = "Returns the designated block hash. If /latest is appended, returns the latest block hash."
ERROR_bkid = """
A valid block identifier is required. Block identifiers begin with BK~, for example, BK~Q3_ac7-.
"""
ERROR_index = """
A valid block index is required. The index is a natural number between 0 and one less than the number of blocks.
See also getblockcount.
"""

[route.getblockid]
PATH = [ "getblockid/latest", "getblockid/index/:index", "getblockid/hash/:hash" ]
":hash" = "TaggedBase64"
":index" = "Integer"
DOC = "Returns the designated block identifier. If /latest is appended, returns the latest block identifier."
ERROR_index = """
A valid block index is required. The index is a natural number between
0 and one less than the number of blocks.

See also getblockcount.
"""
ERROR_hash = """
A valid block hash is required. Block hashes begin with HASH~, for example, HASH~qd47Ob5IQxCPqnCS7YRsXmukzJhFw2k0aAdX_N8i9LYmJ1JYvyELuzfB94TLin12IwwkjqTJebLmlV6vJ2eFl6g.
"""

[route.getblockcount]
PATH = [ "getblockcount" ]
DOC = "Returns the total number of blocks in decimal."

[route.getblock]
PATH = [ "getblock/latest", "getblock/:bkid", "getblock/hash/:hash", "getblock/index/:index" ]
":hash" = "TaggedBase64"
":bkid" = "TaggedBase64"
":index" = "Integer"
DOC = """
Returns all block-specific information
- block identifier
- block hash
- state_commitment
- transaction_data: ordered list of transactions in block
- etc...
"""
ERROR_bkid = """
A valid block identifier is required. Block identifiers begin with BK~, for example, BK~Q3_ac7-.
"""
ERROR_hash = """
A valid block hash is required. Block hashes begin with HASH~, for example, HASH~qd47Ob5IQxCPqnCS7YRsXmukzJhFw2k0aAdX_N8i9LYmJ1JYvyELuzfB94TLin12IwwkjqTJebLmlV6vJ2eFl6g.
"""
ERROR_index = """
A valid block index is required. The index is a natural number between 0 and one less than the number of blocks.
See also getblockcount. 
"""

[route.getmempool]
PATH = [ "getmempool" ]
DOC = """
Returns a set of transaction IDs in memory pool.
"""

# TODO !corbett Does it makes sense to implement gettransaction/latest?
[route.gettransaction]
PATH = [ "gettransaction/:txid" ]
":txid" = "TaggedBase64"
DOC = "Get transaction data associated with a transaction identifier, or an error if no such transaction exists."
ERROR_txid = "A valid transaction identifier is required. Transaction identifiers begin with TX~, for example, TX~Ab-3D_x5."

# TODO !corbett Is this possible in JF?
[route.getunspentrecordsetinfo]
PATH = [ "getunspentrecordsetinfo" ]
DOC = """
Returns statistics about unspent record set including the number of unspent records.
"""

# Does this work in JF?
# TODO !corbett If it does, do we care that it leaks information about the number of outputs in every transaction?
[route.getunspentrecord]
PATH = ["getunspentrecord/:txid/:output_index/:mempool"]
":txid" = "TaggedBase64"
":output_index" = "Integer"
":mempool" = "Boolean"
DOC = """
record_data: details about an unspent record from the *n*th output of the given transaction
"""
ERROR_txid = "A valid transaction identifier is required. Transaction identifiers begin with TX~, for example, TX~Ab-3D_x5."
ERROR_output_index = "No such output. The output index must be non-negative and less than the number of outputs."
ERROR_mempool = "The mempool parameter must be Boolean. The value 'true' indicates mempool information is wanted."

[route.subscribe]
PATH = ["subscribe/:index"]
WEB_SOCKET = true
":index" = "Integer"
DOC = """
A server-sent event (SSE) endpoint which opens a data stream between the server and client. Each
time the state of the ledger changes or something of interest happens, the query service will
generate an event and send it over the stream. For example, events are generated when new blocks are
added to the ledger, when submitted blocks are rejected by validators, and when receiver memos are
posted for a previously accepted block.

The :index URL parameter can be used to subscribe starting a particular event index. Use :index 0 to
subscribe to all events in the history of the network.
"""
ERROR_index = "The event index must be a non-negative integer."

[route.getsnapshot]
PATH = ["getsnapshot/:index/:sparse", "getsnapshot/latest/:sparse"]
":index" = "Integer"
":sparse" = "Boolean"
DOC = """
Get a snapshot of the edger at the specified time. If :index is given, it is the 0-based index of
the desired snapshot, starting from the genesis of the ledger. If using `getsnapshot/latest`, the
most recent snapshot is returned. If `:sparse`, the resulting snapshot is sparse, containing only
root hashes for the UTXO and nullifiers sets. Otherwise, the snapshot contains the full sets.
"""
ERROR_index = "The index must be a non-negative integer."
ERROR_sparse = "The sparse flag must be Boolean."

[route.getuser]
PATH = ["getuser/:address"]
":address" = "TaggedBase64"
DOC = "Returns the public key of a user with a specified address."
ERROR_address = "A valid user address is required. User addresses begin with ADDR~, for example, ADDR~Ab12whatever."

[route.getusers]
PATH = ["getusers"]
DOC = "Returns a list of the public keys of all known users."

[route.getnullifier]
PATH = ["getnullifier/:root/:nullifier"]
":root" = "TaggedBase64"
":nullifier" = "TaggedBase64"
DOC = """
Returns whether the designated nullifier has been spent, along with a proof relative to the
requested root hash. The root must be a historical root hash of the ledger's nullifier set.
"""
ERROR_root = "A valid Merkle set root hash is required. Hashes begin with HASH~."
ERROR_nullifier = "A valid nullifier is required. Nullifiers begin with NUL~."

[route.getstatecomm]
PATH = ["getstatecomm/:index", "getstatecomm/latest"]
":index" = "Integer"
DOC = """
Gets the requested state commitment. Indexing is the same as for `getsnapshot`.
"""
ERROR_index = "The index must be a non-negative integer."

[route.getevent]
PATH = ["getevent/:index"]
":index" = "Integer"
DOC = """
Get the event with the designated index.
"""

# CAPE routes

# TODO !corbett How do transaction notifications work in CAPE?
# TODO !corbett Where do fees fit in?
# TODO !corbett Need a better way to send the password than in the URL.
# TODO !corbett Consider increasing the syntaxtic distance between freeze and unfreeze.

[route.openwallet]
PATH = ["openwallet/:id/:password"]
":id" = "Integer"
":password" = "String"
DOC = """
Open the wallet with the given ID and password.
"""

[route.closewallet]
PATH = ["closewallet"]
DOC = """
Close the current wallet.
"""

[route.getaddress]
PATH = ["getaddress"]
DOC = """
Get the addresses for the current wallet.
"""

[route.getbalance]
PATH = ["getbalance/address/:address", "getbalance/all"]
":address" = "Integer"
DOC = """
Get the balance of the specified address, or get all balances for the current wallet.
"""

[route.getinfo]
PATH = ["getinfo"]
DOC = """
Get the addresses, public keys, and asset codes for the current wallet.
"""

[route.genkey]
PATH = ["genkey/:asset_code/audit", "genkey/:asset_code/freeze"]
":asset_code" = "TaggedBase64"
DOC = """
Generate a key of the given type.
"""

[route.transfer]
PATH = ["xfr/from/:sender/to/:recipient/amount/:amount", "xfr/to/:recipient/from/:sender/amount/:amount"]
":from" = "TaggedBase64"
":recipient" = "TaggedBase64"
":amount" = "Integer"
DOC = """
Transfer amount units from the sender to the recipient.
"""

[route.mint]
PATH = ["mint/asset_code/:asset_code/amount/:amount"]
":asset_code" = "TaggedBase64"
DOC = """
Mint amount units of a given asset code controlled by the current wallet.
"""

[route.freeze]
PATH = ["freeze/asset_code/:asset_code"]
":asset_code" = "TaggedBase64"
DOC = """
Freeze the given asset code.
"""

[route.unfreeze]
PATH = ["unfreeze/asset_code/:asset_code"]
":asset_code" = "TaggedBase64"
DOC = """
Freeze the given asset code.
"""

[route.trace]
PATH = ["trace/asset_code/:asset_code"]
":asset_code" = "TaggedBase64"
DOC = """
Trace the given asset code.
"""
